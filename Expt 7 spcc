EXPT -7 

Aim: To implement a LR(0) parser.
Software Used: TURBOC3.

Theory
LR(0) parsing is a bottom-up parsing technique used to analyze a source program according to a context-free grammar. It is one of the simplest forms of LR parsing,
where the parser uses a finite state machine with no lookahead to recognize viable prefixes and determine reductions.
LR(0) stands for Left-to-right scanning of the input, Rightmost derivation in reverse, with 0 lookahead symbols. It is the foundation for more powerful parsers like SLR(1),
LALR(1), and LR(1).
In LR(0) parsing, the parser constructs states that represent sets of LR(0) items, and transitions are created between these states based on grammar symbols. 
These states and transitions form a Deterministic Finite Automaton (DFA). Using this DFA, a parsing table is constructed which guides the parsing actions—shift, 
reduce, accept, or error.
An LR(0) item is a production rule with a dot (•) placed at some position in the right-hand side, indicating how much of the production has been seen. 
The parser operates using these items, moving the dot as it recognizes symbols from the input.

Step 1: Construct Transition Relations
LR(0) Items: Grammar rules with a dot (•) at various positions.
E → • E + B
E → E • + B
E → E + • B
E → E + B •
A → • (for rules like A → ε)
Shift Items: Of form A → α • B β
Reduce Items: Of form A → α •
Item Set (State): Set of LR(0) items (kernel + closure) Closure: Extend item set by recursively adding items for non-terminals after the dot.
If A → α • B β and B → γ, then add B → • γThe closure of an item set includes the initial items and all items that describe how to parse the next expected non-terminal. 
This ensures the parser considers all possible productions.

Step 2: Augment Grammar
Add a new start rule:
(0) S → E
(1) E → E * B
(2) E → E + B
(3) E → B
(4) B → 0
(5) B → 1
This augmented grammar helps identify the point at which the parser has successfully completed parsing the input.
Begin state: Closure of [S → • E]

Step 3: Construct Item Sets (States)
Item Set 0 (I0):
S → • E
E → • E * B
E → • E + B
E → • B
B → • 0
B → • 1

From I0, transitions:
On '0' → I1: B → 0 •
On '1' → I2: B → 1 •
On E → I3:
S → E •
E → E • * B
E → E • + B
On B → I4: E → B •

From I3:
On '*' → I5:
E → E * • B
B → • 0
B → • 1
On '+' → I6:
E → E + • B
B → • 0
B → • 1

From I5:
On '0' → I1 (same)
On '1' → I2 (same)
On B → I7: E → E * B •
From I6:
On '0' → I1 (same)
On '1' → I2 (same)
On B → I8: E → E + B •
States I1, I2, I4, I7, I8 have no transitions as they are reduce states.


Program:-
To write a code for LR(0) Parser for following Production:
E->E+T
T->T*F/F
F->(E)/char

#include<string.h>
#include<conio.h>
#include<stdio.h>
int axn[][6][2]={
{{100,5},{-1,-1},{-1,-1},{100,4},{-1,-1},{-1,-1}},
{{-1,-1},{100,6},{-1,-1},{-1,-1},{-1,-1},{102,102}},
{{-1,-1},{101,2},{100,7},{-1,-1},{101,2},{101,2}},
{{-1,-1},{101,4},{101,4},{-1,-1},{101,4},{101,4}},
{{100,5},{-1,-1},{-1,-1},{100,4},{-1,-1},{-1,-1}},
{{100,5},{101,6},{101,6},{-1,-1},{101,6},{101,6}},
{{100,5},{-1,-1},{-1,-1},{-1,-1},{-1,-1},{-1,-1}},
{{100,5},{-1,-1},{-1,-1},{100,4},{-1,-1},{-1,-1}},
{{-1,-1},{100,6},{-1,-1},{-1,-1},{100,11},{-1,-1}},
{{-1,-1},{101,1},{100,7},{-1,-1},{101,1},{101,1}},
{{-1,-1},{101,3},{101,3},{-1,-1},{101,3},{101,3}},
{{-1,-1},{101,5},{101,5},{-1,-1},{101,5},{101,5}}
};
int gotot[12][3]={1,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,2,3,-1,-1,-1,-1,9,3,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
int a[10];
char b[10];
int top=-1,btop=-1,i;
void push(int k)
{
if(top<9)
a[++top]=k;
}
void pushb(char k)
{
if(btop<9)
b[++btop]=k;
}
char TOS()
{
return a[top];
}
void pop()
{
if(top>=0)
top--;
}
void popb()
{
if(btop>=0)
b[btop--]='\0';
}
void display()
{
for(i=0;i<=top;i++)
printf("%d%c"
,a[i],b[i]);
}
void display1(char p[],int m)
{
int l;
printf("\t\t");
for(l=m;p[l]!='\0';l++)
printf("%c"
,p[l]);
printf("\n");
}
void error()
{
printf("\n\nSyntax Error");
}
void reduce(int p)
{
int len,k,ad;
char src,
*dest;
switch(p)
{
case 1:dest="E+T";
src='E';
break;
case 2:dest="T";
src='E';
break;
case 3:dest="T*F";
src='T';
break;
case 4:dest="F";
src='T';
break;
case 5:dest="(E)";
src='F';
break;
case 6:dest="i";
src='F';
break;
default:dest="\0";
src='\0';
break;
}
for(k=0;k<strlen(dest);k++)
{
pop();
popb();
}
pushb(src);
switch(src)
{
case 'E': ad=0;
break;
case 'T': ad=1;
break;
case 'F': ad=2;
break;
default: ad=-1;
break;
}
push(gotot[TOS()][ad]);
}
int main()
{
int j,st,ic;
char ip[20]="\0"
,an;
clrscr();
printf("Enter any String :-
gets(ip);
push(0);
display();
printf("\t%s\n"
,ip);
for(j=0;ip[j]!='\0';)
{
st=TOS();
an=ip[j];
if(an>='a'&an<='z')
ic=0;
else if(an=='+')
ic=1;
else if(an=='*')
ic=2;
else if(an=='(')
ic=3;
else if(an==')')
ic=4;
else if(an=='$')
");
ic=5;
else
{
error();
break;
}
if(axn[st][ic][0]==100)
{
pushb(an);
push(axn[st][ic][1]);
display();
j++;
display1(ip,j);
}
if(axn[st][ic][0]==101)
{
reduce(axn[st][ic][1]);
display();
display1(ip,j);
}
if(axn[st][ic][1]==102)
{
printf("Given String is Accepted");
break;
}
}
getch();
return 0;
}

OUTPUT:-
Enter any String :- a+b*c
0 a+b*c
0a5 +b*c
0F3 +b*c
0T2 +b*c
0E1 +b*c
0E1+6 b*c
0E1+6b5 *c
0E1+6F3 *c
0E1+6T9 *c
0E1+6T9*7 c
0E1+6T9*7c5


Conclusion:- Thus we have successfully implemented LR(0) parser.



